A sheep wants to get to the other side of a river. The sheep is initially located on one side of the river
(position -1) and wants to get to the opposite side (position N). The sheep can jump any (integer)
distance between 1 and D. If D is less than or equal to N then the lion cannot jump right across to opposite side of the
river. Nevertheless, there are many stones hidden under the water. The water level is constantly
decreasing, and after some time, the stones will be out of the water. The sheep can jump to stones and from the
stones, but only when the specific stone is already out of the water.
The stones in the river are described in array A consisting of N integers. A[K] represents a time
when the stone at position K will be out of the water(A[K] = -1 means that there is no stones at
position K). You can assume that no two stones will surface simultaneously. The goal is to find the
earliest time when the sheep can get to the other side of the river.
For example, consider integer D = 3 and the following array A consisting of N = 6 integers:
A[0] = 1
A[1] = -1
A[2] = 0
A[3] = 2
A[4] = 3
A[5] = 5
Initially, the sheep cannot jump across the river in a single jump. However, at time 2, there will be
three stones out of the water.
Time 2 is the earliest moment when the sheep can jump across the river.

Write a function:
 Solution { public int solution(int[] A, int D); }
That, given a zero-indexed array A consisting of N integers, and integer D, returns the earliest time
when the sheep can jump to the other side of the river. If the sheep can leap across the river in just one
jump, the function should return 0. If the sheep is never able to jump to the other side of the river, the
function should return -1.

For given A = [3, 2, 1] and D =1, the function should return 3, since the lion has to wait for
each stone.
For given A = [1, 2, 3, 4, -1, -1, -1] and D = 3, the function should return -1,
since the sheep will never get to the other side of the river.
Assume that:
* N is an integer within the range [0 .. 100,000];
* D is an integer within the range [1 .. 100,001];
* Each element of array A is an integer within the range [-1 .. 100,000]; No two stones will
surface simultaneously.